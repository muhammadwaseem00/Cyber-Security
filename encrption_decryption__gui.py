# -*- coding: utf-8 -*-
"""encrption_decryption _GUI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XsAfbZy52-TqIunyvfOJncTjtBovQsSB
"""

!pip install cryptography

from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes, padding
from cryptography.hazmat.backends import default_backend
import os
import base64

# Function to generate a key from a password
def generate_key(password: str, salt: bytes) -> bytes:
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    key = kdf.derive(password.encode())
    return key

# Function to encrypt a plaintext message
def encrypt(plaintext: str, password: str) -> (bytes, bytes, bytes):
    salt = os.urandom(16)
    key = generate_key(password, salt)
    iv = os.urandom(16)
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    encryptor = cipher.encryptor()
    padder = padding.PKCS7(algorithms.AES.block_size).padder()
    padded_data = padder.update(plaintext.encode()) + padder.finalize()
    ciphertext = encryptor.update(padded_data) + encryptor.finalize()
    return salt, iv, ciphertext

# Function to decrypt a ciphertext message
def decrypt(salt: bytes, iv: bytes, ciphertext: bytes, password: str) -> str:
    key = generate_key(password, salt)
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    padded_data = decryptor.update(ciphertext) + decryptor.finalize()
    unpadder = padding.PKCS7(algorithms.AES.block_size).unpadder()
    data = unpadder.update(padded_data) + unpadder.finalize()
    return data.decode()

# Example usage
password = "my_strong_password"
plaintext = "This is a secret message."

# Encrypt the message
salt, iv, ciphertext = encrypt(plaintext, password)
encrypted_message = base64.b64encode(salt + iv + ciphertext).decode()
print(f"Encrypted message: {encrypted_message}")

# Decrypt the message
encrypted_data = base64.b64decode(encrypted_message)
salt = encrypted_data[:16]
iv = encrypted_data[16:32]
ciphertext = encrypted_data[32:]
decrypted_message = decrypt(salt, iv, ciphertext, password)
print(f"Decrypted message: {decrypted_message}")